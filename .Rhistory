# Create a dataframe to visualize the average effects by time interval
time_intervals <- seq(0, max(trace_transformed$time), length.out = 100)
chf_mean_effect <- sapply(time_intervals, function(t) mean(chf_effect[trace_transformed$time <= t]))
wmi_mean_effect <- sapply(time_intervals, function(t) mean(wmi_effect[trace_transformed$time <= t]))
vf_mean_effect <- sapply(time_intervals, function(t) mean(vf_effect[trace_transformed$time <= t]))
diabetes_mean_effect <- sapply(time_intervals, function(t) mean(diabetes_effect[trace_transformed$time <= t]))
par(mfrow=c(2,2))
# Visualize the average time effect of CHF
plot(time_intervals, chf_mean_effect, type = 'l', col = 'red', lwd = 2,
xlab = 'Time (years)', ylab = 'CHF- Av. Time Effect',
main = 'CHF with log(t + 1) Transformation')
# Visualize the average time effect of WMI
plot(time_intervals, wmi_mean_effect, type = 'l', col = 'red', lwd = 2,
xlab = 'Time (years)', ylab = 'WMI- av. Time Effect',
main = 'WMI with log(t + 1) Transformation')
# Visualize the average time effect of Diabetes
plot(time_intervals, diabetes_mean_effect, type = 'l', col = 'red', lwd = 2,
xlab = 'Time (years)', ylab = 'Diab. - av. Time Effect',
main = 'Diabetes with log(t + 1) Transformation')
# Visualize the average time effect of vf
plot(time_intervals, vf_mean_effect, type = 'l', col = 'red', lwd = 2,
xlab = 'Time (years)', ylab = 'VF - av. Time Effect',
main = 'VF with log(t + 1) Transformation')
#covariance
cov_matrix <- cov(TRACE[, c(3,7,8)])
print(cov_matrix)
#pair plot between numeric features
pairs(~age + wmi + time,data=TRACE)
cor(TRACE[,2:8])
km_fit <- survfit(Surv(time, status == 9) ~ 1, data = TRACE)
# Plotting
ggsurvplot(km_fit,
conf.int = TRUE,
title = "Overall Survival",
xlab = "Time (years)",
ylab = "Survival Probability")
km_fit
# Model
km_fit_sex <- survfit(Surv(time, status == 9) ~ sex, data = TRACE)
# Plotting
ggsurvplot(km_fit_sex,
conf.int = TRUE,
title = "Survival by Sex",
xlab = "Time (years)",
ylab = "Survival Probability",
legend.labs = c("Male", "Female"))
# Log-rank test to compare survival between groups
surv_diff <- survdiff(Surv(time, status == 9) ~ sex, data = TRACE)
# Display the result
surv_diff
# Create age groups
TRACE$age_group <- cut(TRACE$age, breaks = c(-Inf, 60, 70, Inf), labels = c("< 60 years", "60-70 years", "> 70 years"))
# Kaplan-Meier fit by age group
km_fit_age <- survfit(Surv(time, status == 9) ~ age_group, data = TRACE)
# Plotting
ggsurvplot(km_fit_age,
conf.int = TRUE,
title = "Survival by Age Group",
xlab = "Time (years)",
ylab = "Survival Probability",
legend.labs = levels(TRACE$age_group))
# Log-rank test to compare survival between Age Group
km_fit_age <- survdiff(Surv(time, status == 9) ~ age_group, data = TRACE)
# Display the result
km_fit_age
# Create WMI groups
TRACE$wmi_group <- cut(TRACE$wmi, breaks = quantile(TRACE$wmi, probs = c(0, 0.33, 0.66, 1), na.rm = TRUE), labels = c("Low", "Medium", "High"))
# Kaplan-Meier fit by WMI group
km_fit_wmi <- survfit(Surv(time, status == 9) ~ wmi_group, data = TRACE)
# Plotting
ggsurvplot(km_fit_wmi,
conf.int = TRUE,
title = "Survival by WMI Group",
xlab = "Time (years)",
ylab = "Survival Probability",
legend.labs = levels(TRACE$wmi_group))
# Log-rank test to compare survival WMI Group
km_fit_wmi <- survdiff(Surv(time, status == 9) ~ wmi_group, data = TRACE)
# Display the result
km_fit_wmi
# Kaplan-Meier fit by diabetes status
km_fit_diabetes <- survfit(Surv(time, status == 9) ~ diabetes, data = TRACE)
# Plotting
ggsurvplot(km_fit_diabetes,
conf.int = TRUE,
title = "Survival by Diabetes Status",
xlab = "Time (years)",
ylab = "Survival Probability",
legend.labs = c("Absent", "Present"))
# Log-rank test to compare survival Diabetes Status
km_fit_diabetes <- survdiff(Surv(time, status == 9) ~ diabetes, data = TRACE)
# Display the result
km_fit_diabetes
# Kaplan-Meier fit by ventricular fibrillation status
km_fit_vf <- survfit(Surv(time, status == 9) ~ vf, data = TRACE)
# Plotting
ggsurvplot(km_fit_vf,
conf.int = TRUE,
title = "Survival by Ventricular Fibrillation (VF) Status",
xlab = "Time (years)",
ylab = "Survival Probability",
legend.labs = c("Absent", "Present"))
# Log-rank test to compare survival Ventricular Fibrillation Status
km_fit_vf <- survdiff(Surv(time, status == 9) ~ vf, data = TRACE)
# Display the result
km_fit_vf
# Kaplan-Meier fit by Diabetes and Ventricular Fibrillation (VF) Status
km_fit_diabetes_vf <- survfit(Surv(time, status == 9) ~ diabetes + vf, data = TRACE)
# Plotting
ggsurvplot(km_fit_diabetes_vf,
conf.int = TRUE,
title = "Survival by Diabetes and Ventricular Fibrillation (VF) Status",
xlab = "Time (years)",
ylab = "Survival Probability",
font.legend = 6,
legend.title = "Groups",
legend.labs = c("Diabetes Absent & VF Absent", "Diabetes Absent & VF Present",
"Diabetes Present & VF Absent", "Diabetes Present & VF Present"))
# Log-rank test to compare survival by Diabetes and Ventricular Fibrillation Status
km_fit_diabetes_vf <- survdiff(Surv(time, status == 9) ~ diabetes + vf, data = TRACE)
# Display the result
km_fit_diabetes_vf
# Kaplan-Meier fit by Age Group and Ventricular Fibrillation (VF) Status
km_fit_age_vf <- survfit(Surv(time, status == 9) ~ age_group + vf, data = TRACE)
# Plotting
ggsurvplot(km_fit_age_vf,
conf.int = TRUE,
title = "Survival by Age Group and Ventricular Fibrillation (VF) Status",
xlab = "Time (years)",
ylab = "Survival Probability",
font.legend = 6,
legend.title = "Groups",
legend.labs = c("< 60 years & VF Absent", "< 60 years & VF Present",
"60-70 years & VF Absent", "60-70 years & VF Present",
"> 70 years & VF Absent", "> 70 years & VF Present"))
# Log-rank test to compare survival by Age Group and Ventricular Fibrillation Status
km_fit_age_vf <- survdiff(Surv(time, status == 9) ~ age_group + vf, data = TRACE)
# Display the result
km_fit_age_vf
# Kaplan-Meier fit by WMI Group and Diabetes Status
km_fit_wmi_diabetes <- survfit(Surv(time, status == 9) ~ wmi_group + diabetes, data = TRACE)
# Plotting
ggsurvplot(km_fit_wmi_diabetes,
conf.int = TRUE,
title = "Survival by WMI Group and Diabetes Status",
xlab = "Time (years)",
ylab = "Survival Probability",
font.legend = 6,
legend.title = "Groups",
legend.labs = c("Low WMI & Diabetes Absent", "Low WMI & Diabetes Present",
"Medium WMI & Diabetes Absent", "Medium WMI & Diabetes Present",
"High WMI & Diabetes Absent", "High WMI & Diabetes Present"))
# Log-rank test to compare survival by WMI and Diabetes Status
km_fit_wmi_diabetes <- survdiff(Surv(time, status == 9) ~ wmi_group + diabetes, data = TRACE)
# Display the result
km_fit_wmi_diabetes
#Make a dataframe with status 7 and 8 filtered out
coxTRACE <- filter(TRACE, status == 9 | status == 0)
#modification to change status=9 to status = 1
coxTRACE$status <- ifelse(coxTRACE$status==9,1,coxTRACE$status)
head(coxTRACE, n=10)
cox_model_base <- coxph(Surv(time, status) ~ chf + sex + vf + age + wmi + diabetes , data = coxTRACE)
summary(cox_model_base)
vif_values <-vif(cox_model_base)
print(vif_values)
cox_model_base2 <- coxph(Surv(time, status) ~ chf  + vf + age + wmi + diabetes , data = coxTRACE)
summary(cox_model_base2)
vif_values2 <-vif(cox_model_base2)
print(vif_values2)
# Check Schoenfeld residual without vf
cox.zph_test_base <- cox.zph(cox_model_base2)
print(cox.zph_test_base$table)
plot(cox.zph_test_base)
#Martingale residual
coxTRACE$residual_bASE2 <- residuals(cox_model_base2, type = "martingale")
par(mfrow = c(1, 3), mar = c(4.2, 2, 2, 2))
with(coxTRACE, {
plot(age, residual_bASE2)
lines(lowess(age, residual_bASE2), lwd = 2)
plot(residual_bASE2 ~ wmi)
lines(lowess(wmi, residual_bASE2), lwd = 2)
})
#Make a dataframe containing transforms of age and wmi
coxTRACE$age_pow_2.6 = coxTRACE$age**2.6 #Best transform to make age linear
coxTRACE$ln_wmi = log(coxTRACE$wmi) #Best transform to make WMI linear
#Fit both standard and transformed coxph models
fit <- coxph(Surv(time, status) ~ age + wmi, data=coxTRACE)
fit2 <- coxph(Surv(time, status) ~ age_pow_2.6 + ln_wmi, data=coxTRACE)
#Plot the Martingale residuals to verify that the nonlinear age and wmi variables are made linear after transformation
ggcoxfunctional(fit = fit, data=coxTRACE) #Test only continuous variables
ggcoxfunctional(fit = fit2, data=coxTRACE) #Test only continuous variables
cox_model_base3 <- coxph(Surv(time, status) ~  chf  + age_pow_2.6 + ln_wmi + diabetes , data = coxTRACE)
summary(cox_model_base3)
vif_values3 <-vif(cox_model_base3)
print(vif_values3)
# Check Schoenfeld residual
cox.zph_test_base3 <- cox.zph(cox_model_base3)
print(cox.zph_test_base3$table)
plot(cox.zph_test_base3)
cox_model_interactions <- coxph(Surv(time, status == 9) ~ wmi*chf + wmi*age + wmi*sex + wmi*diabetes + wmi*vf +
chf*age + chf*sex + chf*diabetes + chf*vf +
age*sex + age*diabetes + age*vf +
sex*diabetes + sex*vf +
diabetes*vf,
data = TRACE)
summary(cox_model_interactions)
#with strata on time dependent features
cox_model_strata <- coxph(Surv(time, status) ~  strata(chf)   + age_pow_2.6 + ln_wmi + strata(diabetes) + strata(vf) , data = coxTRACE)
summary(cox_model_strata)
vif_values_strata <-vif(cox_model_strata)
print(vif_values_strata)
# Schoenfeld residuals
cox.zph_test_strata <- cox.zph(cox_model_strata)
print(cox.zph_test_strata$table)
plot(cox.zph_test_strata)
ggcoxdiagnostics(cox_model_strata, type = "schoenfeld")
#with strata on time dependance
cox_model_strata <- coxph(Surv(time, status) ~ age_pow_2.6 + ln_wmi + strata(diabetes,vf) + strata(chf) , data = coxTRACE)
summary(cox_model_strata)
vif_values_strata <-vif(cox_model_strata)
print(vif_values_strata)
# Schoenfeld residuals
cox.zph_test_strata <- cox.zph(cox_model_strata)
print(cox.zph_test_strata$table)
plot(cox.zph_test_strata)
ggcoxdiagnostics(cox_model_strata, type = "schoenfeld")
#with strata on time dependance feature including diabetes
cox_model_strata3 <- coxph(Surv(time, status) ~  strata(chf)   + age_pow_2.6 + strata(wmi) + strata(diabetes) + strata(vf) , data = coxTRACE)
summary(cox_model_strata3)
vif_values_strata3 <-vif(cox_model_strata3)
print(vif_values_strata3)
# Schoenfeld residuals
cox.zph_test_strata3 <- cox.zph(cox_model_strata3)
print(cox.zph_test_strata3$table)
plot(cox.zph_test_strata3)
ggcoxdiagnostics(cox_model_strata3, type = "schoenfeld")
#with strata on time dependance feature including diabetes
cox_model_strata4 <- coxph(Surv(time, status) ~  strata(chf)   + age_pow_2.6 + strata(wmi,diabetes,vf) , data = coxTRACE)
summary(cox_model_strata4)
vif_values_strata4 <-vif(cox_model_strata4)
print(vif_values_strata4)
# Schoenfeld residuals
cox.zph_test_strata4 <- cox.zph(cox_model_strata4)
print(cox.zph_test_strata4$table)
plot(cox.zph_test_strata4)
ggcoxdiagnostics(cox_model_strata4, type = "schoenfeld")
cox_model_tvc <-coxph(Surv(time, status) ~  age_pow_2.6   + ln_wmi + chf + vf + diabetes+ tt(chf) + tt(vf) + tt(diabetes), data = coxTRACE, tt = function(x, t, ...) x * log(t + 1))
summary(cox_model_tvc)
vif_values_tvc <-vif(cox_model_tvc)
print(vif_values_tvc)
cox_model_tvc2 <-coxph(Surv(time, status) ~  age_pow_2.6   + ln_wmi + chf + vf + tt(chf) + tt(vf) + tt(diabetes) , data = coxTRACE, tt = function(x, t, ...) x * log(t + 1))
summary(cox_model_tvc2)
vif_values_tvc2 <-vif(cox_model_tvc2)
print(vif_values_tvc2)
schoenfeld_res2 <- residuals(cox_model_tvc2, type = "schoenfeld")
event_times <- coxTRACE$time[coxTRACE$status == 1]
# plot(schoenfeld_res2[, "tt(wmi)"] ~ event_times,
#      main = "Schoenfeld Residuals for tt(wmi)",
#      xlab = "Time",
#      ylab = "Schoenfeld Residuals")
# abline(h = 0, col = "red")
# lines(lowess(event_times, schoenfeld_res2[, "tt(wmi)"]), col = "blue")
# event_times <- coxTRACE$time[coxTRACE$status == 1]
plot(schoenfeld_res2[, "tt(vf)"] ~ event_times,
main = "Schoenfeld Residuals for tt(vf)",
xlab = "Time",
ylab = "Schoenfeld Residuals")
abline(h = 0, col = "red")
lines(lowess(event_times, schoenfeld_res2[, "tt(vf)"]), col = "blue")
plot(schoenfeld_res2[, "tt(diabetes)"] ~ event_times,
main = "Schoenfeld Residuals for tt(diabetes)",
xlab = "Time",
ylab = "Schoenfeld Residuals")
abline(h = 0, col = "red")
lines(lowess(event_times, schoenfeld_res2[, "tt(diabetes)"]), col = "blue")
plot(schoenfeld_res2[, "vf"] ~ event_times,
main = "Schoenfeld Residuals for vf",
xlab = "Time",
ylab = "Schoenfeld Residuals")
abline(h = 0, col = "red")
lines(lowess(event_times, schoenfeld_res2[, "vf"]), col = "blue")
plot(schoenfeld_res2[, "age_pow_2.6"] ~ event_times,
main = "Schoenfeld Residuals for age_pow_2.6",
xlab = "Time",
ylab = "Schoenfeld Residuals")
abline(h = 0, col = "red")
lines(lowess(event_times, schoenfeld_res2[, "age_pow_2.6"]), col = "blue")
plot(schoenfeld_res2[, "chf"] ~ event_times,
main = "Schoenfeld Residuals for chf",
xlab = "Time",
ylab = "Schoenfeld Residuals")
abline(h = 0, col = "red")
lines(lowess(event_times, schoenfeld_res2[, "chf"]), col = "blue")
plot(schoenfeld_res2[, "ln_wmi"] ~ event_times,
main = "Schoenfeld Residuals for ln_wmi",
xlab = "Time",
ylab = "Schoenfeld Residuals")
abline(h = 0, col = "red")
lines(lowess(event_times, schoenfeld_res2[, "ln_wmi"]), col = "blue")
cox_model_tvc3 <-coxph(Surv(time, status) ~ age_pow_2.6   + ln_wmi   + vf + tt(vf) + tt(diabetes), data = coxTRACE, tt = function(x, t, ...) x * log(t + 1))
summary(cox_model_tvc3)
vif_values_tvc3 <-vif(cox_model_tvc3)
print(vif_values_tvc3)
# Extract Schoenfeld residual
schoenfeld_res3 <- residuals(cox_model_tvc3, type = "schoenfeld")
event_times <- coxTRACE$time[coxTRACE$status == 1]
plot(schoenfeld_res3[, "ln_wmi"] ~ event_times,
main = "Schoenfeld Residuals for ln_wmi",
xlab = "Time",
ylab = "Schoenfeld Residuals")
abline(h = 0, col = "red")
lines(lowess(event_times, schoenfeld_res3[, "ln_wmi"]), col = "blue")
event_times <- coxTRACE$time[coxTRACE$status == 1]
plot(schoenfeld_res3[, "tt(vf)"] ~ event_times,
main = "Schoenfeld Residuals for tt(vf)",
xlab = "Time",
ylab = "Schoenfeld Residuals")
abline(h = 0, col = "red")
lines(lowess(event_times, schoenfeld_res3[, "tt(vf)"]), col = "blue")
plot(schoenfeld_res3[, "tt(diabetes)"] ~ event_times,
main = "Schoenfeld Residuals for tt(diabetes)",
xlab = "Time",
ylab = "Schoenfeld Residuals")
abline(h = 0, col = "red")
lines(lowess(event_times, schoenfeld_res3[, "tt(diabetes)"]), col = "blue")
plot(schoenfeld_res3[, "vf"] ~ event_times,
main = "Schoenfeld Residuals for vf",
xlab = "Time",
ylab = "Schoenfeld Residuals")
abline(h = 0, col = "red")
lines(lowess(event_times, schoenfeld_res3[, "vf"]), col = "blue")
plot(schoenfeld_res3[, "age_pow_2.6"] ~ event_times,
main = "Schoenfeld Residuals for _pow_2.6",
xlab = "Time",
ylab = "Schoenfeld Residuals")
abline(h = 0, col = "red")
lines(lowess(event_times, schoenfeld_res3[, "age_pow_2.6"]), col = "blue")
cox_model_tinteract_t <- coxph(Surv(time, status) ~ age_pow_2.6 + ln_wmi  + chf * I((time)^(1/2)) + vf * I((time)^(1/2)) + diabetes * I((time)^(1/2)), data = coxTRACE)
summary(cox_model_tinteract_t)
vif_values_tinteract_t <-vif(cox_model_tinteract_t)
print(vif_values_tinteract_t)
# Check Schoenfeld residual
cox.zph_test_tinteract_t <- cox.zph(cox_model_tinteract_t)
print(cox.zph_test_tinteract_t$table)
plot(cox.zph_test_tinteract_t)
cox_model_tinteract_t2 <- coxph(Surv(time, status) ~ age_pow_2.6 + ln_wmi + chf * I(log(time+1)) + vf * I(log(time+1)) + diabetes * I(log(time+1)), data = coxTRACE)
summary(cox_model_tinteract_t2)
vif_values_tinteract_t2 <-vif(cox_model_tinteract_t2)
print(vif_values_tinteract_t2)
# Check Schoenfeld residual
cox.zph_test_tinteract_t2 <- cox.zph(cox_model_tinteract_t2)
print(cox.zph_test_tinteract_t2$table)
plot(cox.zph_test_tinteract_t2)
# Survival curb
surv_object <- Surv(coxTRACE$time, coxTRACE$status)
fit <- survfit(surv_object ~ 1, data = coxTRACE)
plot(fit, xlab = "Time", ylab = "Survival prob", main = "Survival courb")
# Definition of truncation bounds
truncation_point_sup <- 6.65
truncation_point_inf <- 1.8
# Create new truncated data
coxTRACE_truncated <- within(coxTRACE, {
status_truncated <- ifelse(time < truncation_point_inf | time > truncation_point_sup, 0, status)
time_truncated <- ifelse(time < truncation_point_inf, truncation_point_inf, ifelse(time > truncation_point_sup,truncation_point_sup , time))
# Truncation of time-dependent covariates
chf_truncated <- ifelse(time < truncation_point_inf | time > truncation_point_sup, 0, chf)
age_truncated <- ifelse(time < truncation_point_inf | time > truncation_point_sup, 0, age)
sex_truncated <- ifelse(time < truncation_point_inf | time > truncation_point_sup, 0, sex)
vf_truncated <- ifelse(time < truncation_point_inf | time > truncation_point_sup, 0, vf)
wmi_truncated <- ifelse(time < truncation_point_inf | time > truncation_point_sup, 0, wmi)
diabetes_truncated <- ifelse(time < truncation_point_inf | time > truncation_point_sup, 0, diabetes)
})
# Survival with truncated variables
surv_object_truncated <- Surv(coxTRACE_truncated$time_truncated, coxTRACE_truncated$status_truncated)
fit_truncated <- survfit(surv_object_truncated ~ 1, data = coxTRACE_truncated)
# Visualize the new survival curve
plot(fit_truncated, xlab = "Time", ylab = "Survival prob", main = "Survival curb with truncated data")
cox_model_trunc <- coxph(Surv(time_truncated, status_truncated) ~ sex_truncated + chf_truncated  + vf_truncated + age_truncated + wmi_truncated + diabetes_truncated , data = coxTRACE_truncated)
summary(cox_model_trunc)
vif_values_trunc <-vif(cox_model_trunc)
print(vif_values_trunc)
# Check Schoenfeld residual
cox.zph_trunc <- cox.zph(cox_model_trunc)
print(cox.zph_trunc$table)
plot(cox.zph_trunc)
cox_model_trunc2 <- coxph(Surv(time_truncated, status_truncated) ~ sex_truncated + chf_truncated  + age_truncated + diabetes_truncated , data = coxTRACE_truncated)
summary(cox_model_trunc2)
vif_values_trunc2 <-vif(cox_model_trunc2)
print(vif_values_trunc2)
# Check Schoenfeld residual
cox.zph_trunc2 <- cox.zph(cox_model_trunc2)
print(cox.zph_trunc2$table)
plot(cox.zph_trunc2)
#Martingale residual
coxTRACE_truncated$residual_trunc <- residuals(cox_model_trunc2, type = "martingale")
par(mfrow = c(1, 3), mar = c(4.2, 2, 2, 2))
with(coxTRACE_truncated, {
plot(age_truncated, residual_trunc)
lines(lowess(age, residual_trunc), lwd = 2)
})
# Check different models variable
model1 <- coxph(Surv(time_truncated, status_truncated) ~ sex_truncated + chf_truncated  + age_truncated + diabetes_truncated , data = coxTRACE_truncated)
model2 <- coxph(Surv(time, status) ~  strata(chf)   + age_pow_2.6 + ln_wmi + strata(diabetes) + strata(vf),data=coxTRACE)
model3 <- coxph(Surv(time, status) ~ age_pow_2.6 + ln_wmi + strata(diabetes,vf) + strata(chf),data=coxTRACE)
model4 <- coxph(Surv(time, status) ~ strata(chf)   + age_pow_2.6 + strata(wmi) + strata(diabetes) + strata(vf),data=coxTRACE)
model5 <- coxph(Surv(time, status) ~ strata(chf)   + age_pow_2.6 + strata(wmi,diabetes) + strata(vf),data=coxTRACE)
model6 <- coxph(Surv(time, status) ~ strata(chf)   + age_pow_2.6 + strata(wmi,diabetes,vf),data=coxTRACE)
model7 <- coxph(Surv(time, status) ~ age_pow_2.6   + ln_wmi   + vf + tt(vf) + tt(diabetes), data = coxTRACE, tt = function(x, t, ...) x * log(t + 1))
# Compute AIC
aic_1 <- AIC(model1)
aic_2 <- AIC(model2)
aic_3 <- AIC(model3)
aic_4 <- AIC(model4)
aic_5 <- AIC(model5)
aic_6 <- AIC(model6)
aic_7 <- AIC(model7)
cat("AIC with truncated data (sex, age, diabetes, chf):", aic_1, "\n")
cat("AIC with strata (diabetes,vf,chf) + transformed lmi,age:", aic_2, "\n")
cat("AIC with combined strata (**diabetes+vf**,chf) + transformed lmi,age:", aic_3, "\n")
cat("AIC with strata (diabetes,vf,chf,wmi) + transformed age :", aic_4, "\n")
cat("AIC with combined strata (**diabetes+ vf**,chf,wmi) + transformed age:", aic_5, "\n")
cat("AIC with combined strata (**diabetes+ vf +wmi**,chf) + transformed age :", aic_6, "\n")
cat("AIC with tt():", aic_7, "\n")
bestmodelaic<-coxph(Surv(time_truncated, status_truncated) ~ sex_truncated + chf_truncated  + age_truncated + diabetes_truncated , data = coxTRACE_truncated)
fullmodel<-coxph(Surv(time_truncated, status_truncated) ~ sex_truncated + chf_truncated  + age_truncated + diabetes_truncated +wmi_truncated +vf_truncated , data = coxTRACE_truncated)
plot(survfit(bestmodelaic), main="Survival Probability - Truncated data",
ylab="Probability", xlab="Years",
col=c("turquoise", "black", "black"))
lines(survfit(fullmodel), col="red", lty=2)
plot(survfit(bestmodelaic, type="fleming"), fun="cumhaz", main="Cumulative Hazard - Truncated data",
ylab="Hazard", xlab="Years",
col=c("turquoise", "black", "black"))
lines(survfit(fullmodel, type="fleming"), fun="cumhaz", col="red", lty=2)
#Make the input coxph function
coxph_chosen <- function(data, formula, beta_init=NULL){
if (is.null(beta_init)){
fit <- coxph(formula, data=data)
} else {
fit <- coxph(formula, data=data, init=beta_init)
}
return(fit)
}
#Generate data frame ordered by survival time and with survival group column (necessary for likelihood calculation)
cross_validation <- function(df, formula, nb_folds=10){
#Initialize the folds
folds <- createFolds(df[,1], k = nb_folds)
#Prepare variables to store results
log_likelihood_train <- list()
log_likelihood_global <- list()
# Loop through the folds
for (i in 1:nb_folds){
# Split into train and test
df_train <- df[-folds[[i]],]
#df_test <- df[folds[[i]],]
# Train the model using fold
fit <- coxph_chosen(df_train, formula)
betas <- as.vector(fit$coefficients)
# Train with all data, but using the betas derived from the fold
fit_global <- coxph_chosen(df, formula, betas)
#Save log likelihoods
log_likelihood_train[[i]] <- fit$loglik[2] #Retrieve the final log likelihood (final betas)
log_likelihood_global[[i]] <- fit_global$loglik[1] #Retrieve the inital log likelihood (starting betas)
}
fold_error <- -2 * (unlist(log_likelihood_global) - unlist(log_likelihood_train))
CVE <- sum(fold_error)
std_dev <- sd(fold_error)
cat("Cross Validation Error: ", CVE, "\n", "Standard Deviation: ", std_dev, "\n", "Formula: ", toString(formula), "\n\n", sep = "")
}
set.seed(3213)
formulas <- c(Surv(time, status) ~  strata(chf)   + age_pow_2.6 + ln_wmi + strata(diabetes) + strata(vf),
Surv(time, status) ~ age_pow_2.6 + ln_wmi + strata(diabetes,vf) + strata(chf),
Surv(time, status) ~ strata(chf)   + age_pow_2.6 + strata(wmi) + strata(diabetes) + strata(vf),
Surv(time, status) ~ strata(chf)   + age_pow_2.6 + strata(wmi,diabetes) + strata(vf),
Surv(time, status) ~ strata(chf)   + age_pow_2.6 + strata(wmi,diabetes,vf)
)
for (formula in formulas){
cross_validation(coxTRACE, formula)
}
set.seed(3213)
formulas <- c(Surv(time_truncated, status_truncated) ~ sex_truncated + chf_truncated  + age_truncated + diabetes_truncated
#  "Surv(time, status == 9) ~ age + sex + wmi + diabetes + chf + vf",
# "Surv(time, status == 9) ~ ridge(age + sex + wmi + diabetes + chf + vf)",
#"Surv(time, status == 9) ~ age + wmi + strata(sex + diabetes + chf + vf)"
)
for (formula in formulas){
cross_validation(coxTRACE_truncated, formula)
}
timecox_model <- timecox(Surv(time, status) ~ age + chf + vf + diabetes + wmi,
data = coxTRACE,
n.sim = 200,   # This seems to be the correct argument for simulations
max.time = 9
)
summary(timecox_model)
par(mfrow=c(2,3))
plot(timecox_model)
par(mfrow=c(2,3))
plot(timecox_model,score=TRUE)
timecox_model1 <- timecox(Surv(time, status) ~ const(age) + chf + vf + diabetes + wmi,
data = coxTRACE,
n.sim = 200,   # This seems to be the correct argument for simulations
max.time = 9 # This is correctly placed
)
timecox_model2 <- timecox(Surv(time, status) ~ const(age) + chf + vf + const(diabetes) + const(wmi),
data = coxTRACE,
n.sim = 200,   # This seems to be the correct argument for simulations
max.time = 9 # This is correctly placed
)
timecox_model3 <- timecox(Surv(time, status) ~ const(age) + const(chf) + vf + const(diabetes) + const(wmi),
data = coxTRACE,
n.sim = 200,   # This seems to be the correct argument for simulations
max.time = 9 # This is correctly placed
)
